$date
	Thu Feb 09 21:51:50 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb $end
$var wire 4 ! s [3:0] $end
$var wire 4 " c [3:0] $end
$var reg 4 # a [3:0] $end
$var reg 4 $ b [3:0] $end
$scope module r0 $end
$var wire 4 % a [3:0] $end
$var wire 4 & b [3:0] $end
$var wire 4 ' s [3:0] $end
$var wire 4 ( c [3:0] $end
$scope module f0 $end
$var wire 1 ) a $end
$var wire 1 * b $end
$var wire 1 + c $end
$var wire 1 , cout $end
$var wire 1 - sum1 $end
$var wire 1 . s $end
$var wire 1 / cout2 $end
$var wire 1 0 cout1 $end
$scope module h0 $end
$var wire 1 ) a $end
$var wire 1 * b $end
$var wire 1 0 cout $end
$var wire 1 - s $end
$upscope $end
$scope module h1 $end
$var wire 1 - a $end
$var wire 1 + b $end
$var wire 1 / cout $end
$var wire 1 . s $end
$upscope $end
$upscope $end
$scope module f1 $end
$var wire 1 1 a $end
$var wire 1 2 b $end
$var wire 1 3 c $end
$var wire 1 4 cout $end
$var wire 1 5 sum1 $end
$var wire 1 6 s $end
$var wire 1 7 cout2 $end
$var wire 1 8 cout1 $end
$scope module h0 $end
$var wire 1 1 a $end
$var wire 1 2 b $end
$var wire 1 8 cout $end
$var wire 1 5 s $end
$upscope $end
$scope module h1 $end
$var wire 1 5 a $end
$var wire 1 3 b $end
$var wire 1 7 cout $end
$var wire 1 6 s $end
$upscope $end
$upscope $end
$scope module f2 $end
$var wire 1 9 a $end
$var wire 1 : b $end
$var wire 1 ; c $end
$var wire 1 < cout $end
$var wire 1 = sum1 $end
$var wire 1 > s $end
$var wire 1 ? cout2 $end
$var wire 1 @ cout1 $end
$scope module h0 $end
$var wire 1 9 a $end
$var wire 1 : b $end
$var wire 1 @ cout $end
$var wire 1 = s $end
$upscope $end
$scope module h1 $end
$var wire 1 = a $end
$var wire 1 ; b $end
$var wire 1 ? cout $end
$var wire 1 > s $end
$upscope $end
$upscope $end
$scope module f3 $end
$var wire 1 A a $end
$var wire 1 B b $end
$var wire 1 C c $end
$var wire 1 D cout $end
$var wire 1 E sum1 $end
$var wire 1 F s $end
$var wire 1 G cout2 $end
$var wire 1 H cout1 $end
$scope module h0 $end
$var wire 1 A a $end
$var wire 1 B b $end
$var wire 1 H cout $end
$var wire 1 E s $end
$upscope $end
$scope module h1 $end
$var wire 1 E a $end
$var wire 1 C b $end
$var wire 1 G cout $end
$var wire 1 F s $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0H
0G
1F
1E
0D
0C
1B
0A
0@
0?
1>
0=
0<
1;
0:
09
18
07
16
05
14
13
12
11
10
0/
0.
0-
1,
0+
1*
1)
b11 (
b1110 '
b1011 &
b11 %
b1011 $
b11 #
b11 "
b1110 !
$end
